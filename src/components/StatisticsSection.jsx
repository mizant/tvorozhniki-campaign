import React, { useState, useEffect } from 'react'
import { calculateVotingStatistics, initializeStatistics } from '../utils/voteDataAnalyzer'

const StatisticsSection = ({ voteCount }) => {
  const [realStats, setRealStats] = useState({
    totalVotes: 0,
    tvorozhnikisVotes: 0,
    syrnikisVotes: 0,
    topCities: [],
    recentVotes: []
  })
  const [loading, setLoading] = useState(true)
  
  // Initialize and load statistics
  useEffect(() => {
    const loadStatistics = async () => {
      setLoading(true)
      console.log('Loading statistics...')
      
      // Initialize baseline data if needed
      initializeStatistics()
      
      // Calculate real statistics
      try {
        const stats = await calculateVotingStatistics()
        console.log('Received statistics:', stats)
        setRealStats(stats)
      } catch (error) {
        console.error('Error loading statistics:', error)
      }
      setLoading(false)
    }
    
    loadStatistics()
    
    // Set up interval to refresh statistics every 30 seconds
    const interval = setInterval(loadStatistics, 30000)
    
    return () => clearInterval(interval)
  }, [voteCount]) // Refresh when voteCount changes
  
  // Use real data or fallback to passed voteCount
  const displayTotalVotes = (realStats.totalVotes || 0) > 0 ? (realStats.totalVotes || 0) : (voteCount || 0)
  const displayTvorozhnikis = realStats.tvorozhnikisVotes || 0
  const displaySyrniki = realStats.syrnikisVotes || 0

  const totalGoal = 10000
  const progressPercentage = Math.min((displayTotalVotes / totalGoal) * 100, 100)

  return (
    <section id="statistics" className="statistics-section">
      <div className="container">
        <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</h2>
        
        {loading && (
          <div className="loading-indicator">
            <p>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
          </div>
        )}
        
        <div className="stats-grid">
          {/* Main Progress */}
          <div className="stat-card main-progress">
            <h3>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</h3>
            <div className="big-number">{displayTotalVotes.toLocaleString()}</div>
            <p>–∏–∑ {totalGoal.toLocaleString()} –≥–æ–ª–æ—Å–æ–≤</p>
            
            <div className="progress-bar">
              <div 
                className="progress-fill" 
                style={{ width: `${progressPercentage}%` }}
              ></div>
            </div>
            <p className="progress-text">{progressPercentage.toFixed(1)}% –¥–æ —Ü–µ–ª–∏</p>
            
            {realStats.totalVotes > 0 && (
              <div className="real-data-indicator">
                <small>üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</small>
              </div>
            )}
          </div>

          {/* Vote Distribution */}
          <div className="stat-card vote-distribution">
            <h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤</h3>
            {displayTotalVotes > 0 ? (
              <div className="vote-results">
                <div className="vote-result tvorozhniki">
                  <div className="vote-bar">
                    <div 
                      className="vote-fill tvorozhniki-fill" 
                      style={{ width: `${((displayTvorozhnikis || 0) / (displayTotalVotes || 1)) * 100}%` }}
                    ></div>
                  </div>
                  <div className="vote-info">
                    <span className="vote-option">–¢–í–û–†–û–ñ–ù–ò–ö–ò</span>
                    <span className="vote-count">
                      {(displayTvorozhnikis || 0).toLocaleString()} ({Math.round(((displayTvorozhnikis || 0) / (displayTotalVotes || 1)) * 100)}%)
                    </span>
                  </div>
                </div>
                
                <div className="vote-result syrniki">
                  <div className="vote-bar">
                    <div 
                      className="vote-fill syrniki-fill" 
                      style={{ width: `${((displaySyrniki || 0) / (displayTotalVotes || 1)) * 100}%` }}
                    ></div>
                  </div>
                  <div className="vote-info">
                    <span className="vote-option">–°–´–†–ù–ò–ö–ò</span>
                    <span className="vote-count">
                      {(displaySyrniki || 0).toLocaleString()} ({Math.round(((displaySyrniki || 0) / (displayTotalVotes || 1)) * 100)}%)
                    </span>
                  </div>
                </div>
              </div>
            ) : (
              <div className="no-votes">
                <p>–ü–æ–∫–∞ –Ω–µ—Ç –≥–æ–ª–æ—Å–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º–∏!</p>
              </div>
            )}

          </div>

          {/* Top Cities */}
          <div className="stat-card top-cities">
            <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞</h3>
            {realStats.topCities && realStats.topCities.length > 0 ? (
              <div className="cities-list">
                {realStats.topCities.map((city, index) => (
                  <div key={city.name || index} className="city-item">
                    <span className="city-position">#{index + 1}</span>
                    <span className="city-name">{city.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                    <span className="city-votes">
                      {(city.votes || 0)} {(city.votes || 0) === 1 ? '–≥–æ–ª–æ—Å' : (city.votes || 0) < 5 ? '–≥–æ–ª–æ—Å–∞' : '–≥–æ–ª–æ—Å–æ–≤'}
                    </span>
                  </div>
                ))}
              </div>
            ) : (
              <div className="no-cities">
                <p>–î–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
              </div>
            )}
          </div>

          {/* Real-time Activity */}
          <div className="stat-card recent-activity">
            <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–ª–æ—Å–∞</h3>
            {realStats.recentVotes && realStats.recentVotes.length > 0 ? (
              <div className="activity-feed">
                {realStats.recentVotes.slice(0, 4).map((activity, index) => (
                  <div key={`${activity.timestamp}-${index}`} className="activity-item">
                    <span className="voter">{activity.name || '–ê–Ω–æ–Ω–∏–º'}, {activity.city || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                    <span className={`vote ${activity.choice || ''}`}>
                      ‚Üí {activity.choice === 'tvorozhniki' ? '–¢–í–û–†–û–ñ–ù–ò–ö–ò' : activity.choice === 'syrniki' ? '–°–´–†–ù–ò–ö–ò' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                    </span>
                    <span className="time">{activity.timeAgo || '–Ω–µ–¥–∞–≤–Ω–æ'}</span>
                  </div>
                ))}
              </div>
            ) : (
              <div className="no-activity">
                <p>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞</p>
              </div>
            )}
          </div>
        </div>

        <div className="milestone-info">
          <h3>üéØ –°–ª–µ–¥—É—é—â–∏–µ —Ü–µ–ª–∏</h3>
          <div className="milestones">
            <div className={`milestone ${displayTotalVotes >= 10 ? 'achieved' : ''}`}>
              <span className="milestone-number">10</span>
              <span className="milestone-desc">–ü–µ—Ä–≤—ã–µ 10 –≥–æ–ª–æ—Å–æ–≤!</span>
            </div>
            <div className={`milestone ${displayTotalVotes >= 50 ? 'achieved' : ''}`}>
              <span className="milestone-number">50</span>
              <span className="milestone-desc">–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</span>
            </div>
            <div className={`milestone ${displayTotalVotes >= 100 ? 'achieved' : ''}`}>
              <span className="milestone-number">100</span>
              <span className="milestone-desc">–°–æ—Ç—ã–π –≥–æ–ª–æ—Å!</span>
            </div>
            <div className={`milestone ${displayTotalVotes >= 500 ? 'achieved' : ''}`}>
              <span className="milestone-number">500</span>
              <span className="milestone-desc">–ù–∞—Ä–æ–¥–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</span>
            </div>
            <div className={`milestone ${displayTotalVotes >= 1000 ? 'achieved' : ''}`}>
              <span className="milestone-number">1,000</span>
              <span className="milestone-desc">–¢—ã—Å—è—á–Ω—ã–π –≥–æ–ª–æ—Å!</span>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

export default StatisticsSection